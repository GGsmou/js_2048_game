{"version":3,"sources":["scripts/main.js"],"names":["ANIMATION_TIME","DELAY","board","score","canMove","btn","document","querySelector","scoreElement","messageElement","boardElement","clearBoard","forEach","row","rowIndex","cell","cellIndex","buildBoard","innerHTML","boardBG","createElement","classList","add","rowBG","cellElement","cellBG","setTimeout","remove","setAttribute","appendChild","updateBoard","allCeslls","querySelectorAll","allCellsArray","Array","from","filter","contains","r","getAttribute","c","setScore","scoreToSet","addRandomCell","emptyCells","push","length","randCell","Math","floor","random","slide","newRow","finalRow","moveLeft","tempBoard","moveRight","reverse","moveUp","column","map","moveDown","moveCells","direction","currentBoard","toChange","increaseScore","reduce","acc","acc2","winGame","looseGame","proccesInput","ev","key","some","removeEventListener","allMoves","condidtion","move","startGame","addEventListener"],"mappings":"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","file":"main.303ca2d6.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst ANIMATION_TIME = 250;\n// delay must be equal or greater than ANIMATION_TIME\n// left 0 for cypress tests to pass\nconst DELAY = 0;\nconst board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\nlet score = 0;\nlet canMove = true;\n\nconst btn = document.querySelector('.button');\nconst scoreElement = document.querySelector('.game-score');\nconst messageElement = document.querySelector('.message');\nconst boardElement = document.querySelector('.game-field');\n\nconst clearBoard = () => {\n  board.forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      board[rowIndex][cellIndex] = 0;\n    });\n  });\n};\n\nconst buildBoard = () => {\n  boardElement.innerHTML = '';\n\n  const boardBG = document.createElement('div');\n\n  boardBG.classList.add('field-bg');\n\n  board.forEach((row, rowIndex) => {\n    const rowBG = document.createElement('div');\n\n    rowBG.classList.add('field-row');\n\n    row.forEach((cell, cellIndex) => {\n      const cellElement = document.createElement('div');\n      const cellBG = document.createElement('div');\n\n      cellBG.classList.add('field-cell');\n      cellBG.classList.add('field-cell--empty');\n\n      cellElement.classList.add('field-cell');\n      cellElement.classList.add(`field-cell--${cell}`);\n      cellElement.classList.add(`field-cell--pop`);\n\n      setTimeout(() => {\n        cellElement.classList.remove(`field-cell--pop`);\n      }, ANIMATION_TIME);\n\n      cellElement.classList\n        .add(`field-cell--position--${rowIndex}-${cellIndex}`);\n\n      cellElement.setAttribute('data-row', rowIndex);\n      cellElement.setAttribute('data-cell', cellIndex);\n\n      cellElement.innerHTML = cell || '';\n\n      boardElement.appendChild(cellElement);\n      rowBG.appendChild(cellBG);\n    });\n\n    boardBG.appendChild(rowBG);\n  });\n\n  boardElement.appendChild(boardBG);\n};\n\nconst updateBoard = () => {\n  const allCeslls = document.querySelectorAll('.field-cell');\n\n  const allCellsArray = Array.from(allCeslls).filter(\n    (cell) => !cell.classList.contains('field-cell--empty')\n  );\n\n  for (const cell of allCellsArray) {\n    const r = cell.getAttribute('data-row');\n    const c = cell.getAttribute('data-cell');\n\n    cell.classList.remove(`field-cell--${cell.innerHTML}`);\n    cell.classList.add(`field-cell--${board[r][c]}`);\n    cell.innerHTML = board[r][c] || '';\n\n    cell.classList.add(`field-cell--pop`);\n\n    setTimeout(() => {\n      cell.classList.remove(`field-cell--pop`);\n    }, ANIMATION_TIME);\n  }\n};\n\nconst setScore = (scoreToSet) => {\n  scoreElement.innerHTML = scoreToSet;\n};\n\nconst addRandomCell = () => {\n  const emptyCells = [];\n\n  board.forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      if (!cell) {\n        emptyCells.push({\n          row: rowIndex,\n          cell: cellIndex,\n        });\n      }\n    });\n  });\n\n  if (emptyCells.length) {\n    const randCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    board[randCell.row][randCell.cell] = Math.random() > 0.9 ? 4 : 2;\n  }\n};\n\nconst slide = (row) => {\n  const newRow = row.filter((cell) => cell !== 0);\n\n  newRow.forEach((cell, cellIndex) => {\n    if (cell === newRow[cellIndex + 1]) {\n      newRow[cellIndex] *= 2;\n      newRow[cellIndex + 1] = 0;\n    }\n  });\n\n  const finalRow = newRow.filter((cell) => cell !== 0);\n\n  while (finalRow.length < 4) {\n    finalRow.push(0);\n  }\n\n  return finalRow;\n};\n\nconst moveLeft = (tempBoard) => {\n  tempBoard.forEach((row, rowIndex) => {\n    tempBoard[rowIndex] = slide(row);\n  });\n};\n\nconst moveRight = (tempBoard) => {\n  tempBoard.forEach((row, rowIndex) => {\n    tempBoard[rowIndex] = slide(row.reverse()).reverse();\n  });\n};\n\nconst moveUp = (tempBoard) => {\n  for (let c = 0; c < 4; c += 1) {\n    const column = tempBoard.map((row) => row[c]);\n\n    const newColumn = slide(column);\n\n    newColumn.forEach((cell, rowIndex) => {\n      tempBoard[rowIndex][c] = cell;\n    });\n  }\n};\n\nconst moveDown = (tempBoard) => {\n  for (let c = 0; c < 4; c += 1) {\n    const column = tempBoard.map((row) => row[c]).reverse();\n\n    const newColumn = slide(column).reverse();\n\n    newColumn.forEach((cell, rowIndex) => {\n      tempBoard[rowIndex][c] = cell;\n    });\n  }\n};\n\nconst moveCells = (direction) => {\n  if (!canMove) {\n    return;\n  }\n\n  const currentBoard = board.map((row) => [...row]);\n\n  switch (direction) {\n    case 'ArrowUp':\n      moveUp(currentBoard);\n      break;\n    case 'ArrowDown':\n      moveDown(currentBoard);\n      break;\n    case 'ArrowLeft':\n      moveLeft(currentBoard);\n      break;\n    case 'ArrowRight':\n      moveRight(currentBoard);\n      break;\n    default:\n      break;\n  }\n\n  let toChange = false;\n\n  canMove = false;\n\n  setTimeout(() => {\n    canMove = true;\n  }, DELAY);\n\n  for (let r = 0; r < 4; r++) {\n    for (let c = 0; c < 4; c++) {\n      if (currentBoard[r][c] !== board[r][c]) {\n        toChange = true;\n\n        break;\n      }\n    }\n\n    if (toChange) {\n      break;\n    }\n  }\n\n  if (!toChange) {\n    return;\n  }\n\n  board.forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      board[rowIndex][cellIndex] = currentBoard[rowIndex][cellIndex];\n    });\n  });\n\n  addRandomCell();\n\n  updateBoard();\n\n  const increaseScore = board.reduce(\n    (acc, row) => acc + row.reduce((acc2, cell) => acc2 + cell, 0), 0\n  );\n\n  setScore(score += increaseScore);\n\n  winGame();\n  looseGame();\n};\n\nconst proccesInput = (ev) => {\n  const key = ev.key;\n\n  if (\n    key === 'ArrowUp'\n    || key === 'ArrowDown'\n    || key === 'ArrowLeft'\n    || key === 'ArrowRight'\n  ) {\n    moveCells(key);\n  }\n};\n\nconst winGame = () => {\n  const win = board.some((row) => row.some((cell) => cell === 2048));\n\n  if (win) {\n    document.removeEventListener('keydown', proccesInput);\n    messageElement.innerHTML = 'Winner! Congrats! You did it!';\n\n    messageElement.classList = '';\n    messageElement.classList.add('message');\n    messageElement.classList.add('message-win');\n  }\n};\n\nconst looseGame = () => {\n  let condidtion = true;\n\n  const allMoves = [\n    moveUp,\n    moveDown,\n    moveLeft,\n    moveRight,\n  ];\n\n  for (const move of allMoves) {\n    const currentBoard = board.map((row) => [...row]);\n\n    move(currentBoard);\n\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (currentBoard[r][c] !== board[r][c]) {\n          condidtion = false;\n\n          break;\n        }\n      }\n\n      if (!condidtion) {\n        break;\n      }\n    }\n\n    if (!condidtion) {\n      break;\n    }\n  }\n\n  if (condidtion) {\n    document.removeEventListener('keydown', proccesInput);\n    messageElement.innerHTML = 'You lose! Restart the game?';\n\n    messageElement.classList = '';\n    messageElement.classList.add('message');\n    messageElement.classList.add('message-lose');\n  }\n};\n\nconst startGame = () => {\n  setScore(score = 0);\n  clearBoard();\n\n  btn.innerHTML = 'Restart';\n  btn.classList.remove('start');\n  btn.classList.add('restart');\n\n  messageElement.classList.add('hidden');\n\n  addRandomCell();\n  buildBoard();\n\n  document.addEventListener('keydown', proccesInput);\n};\n\nbtn.addEventListener('click', startGame);\n"]}